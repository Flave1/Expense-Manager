@model IEnumerable<GlobalLitePortalHelper.APIObjs.ExpenseRequisitionObj>
@using XPLUG.WEBTOOLKIT
@using PlugLitePortalHelper.APIObjs
@using GlobalLitePortalHelper.APICore
@using  GlobalLitePortal.Extension
@{
    ViewBag.Title = "ExpenseRequisition Management";
    ViewBag.PgTitle = "ExpenseRequisition Management";
    var error = ViewBag.Error as string;

    decimal sum = 0;
    var deptList = (List<DepartmentObj>)Session["_DeptList_"];
    if (deptList == null)
    {
        deptList = new List<DepartmentObj>();
    }
    
}
@Html.Partial("_WaitLoader")

    
<b><h3> Requisition Reports  </h3></b>
<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-sm-12">
                <div class="col-sm-12">

                    <div class="row">
                        <div class="col-md-4">
                            <label>Date </label>
                            <div id="reportrange" class="form-control input-new">
                                <i class="fa fa-calendar"></i>&nbsp;
                                <span></span> <i class="fa fa-caret-down"></i>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <label>Request Status</label>
                            @Html.DropDownList("RequestStatus", EnumHelper.GetSelectList(typeof(RequestStatus)), "Select Request Status", new { @id = "RequestStatusId", @class = "form-control input-new" })
                        </div>

                        <div class="col-md-4">
                            <label>Request Type</label>
                            @Html.DropDownList("RequestType", EnumHelper.GetSelectList(typeof(RequestType)), "Select Request Type", new { @id = "RequestTypeId", @class = "form-control input-new" })
                        </div>
                        <div class="col-md-3">
                            <label>Beneficiary</label>
                            <select id="BeneficiaryId" name="ExpenseItem" class="  browser-default custom-select custom-select-lg mb-3 input-new"></select>
                        </div>
                        <div class="col-md-3">
                            <label>Items</label>
                            <select id="ExpenseItemId" name="ExpenseItem" class="  browser-default custom-select custom-select-lg mb-3 input-new"></select>
                        </div>
                        <div class="col-md-1" style="padding-top:6px;">
                            <br />
                            <button type="button" class="btn btn-success btn-sm waves-effect waves-light d-inline-block md-trigger" id="btnLoad">
                                <i class="icofont icofont-plus m-r-5"></i>LOAD
                            </button>
                        </div>
                        <div class="col-md-5">
                            <hr />
                            <div class="row">
                                <input type="text" readonly value="" class="col-5   browser-default custom-select-lg mb-3 input-new" id="TotalAmt" />
                                <input type="text" readonly value="" class="col-5   browser-default custom-select-lg mb-3 input-new" id="grandTotal" />
                                <input type="button" value="Excel" onclick="fnExcelReport()" class="btn-red browser-default custom-select-lg mb-3 input-new" />
                            </div>
                            @*id="excelExport"*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card-block">
        @if (!string.IsNullOrEmpty(error) && error.Length > 0)
        {
            <div class="alert alert-success btn btn-sm" role="alert">
                @Html.Raw(error)
            </div>
        }
    <div class="table-responsive">
        <table id="dtBasicExample" class="table table-striped table-bordered" cellspacing="0" width="100%">
          
            <thead>
                <tr>
                    <th>#</th>
                   <th> Title  </th>
                    <th>Date</th>
                    <th>Department</th>
                    <th>Req.Amount</th>
                    <th>Retr.Amount </th>
                    <th>Appr.Amount </th>
                    <th>T.Amount </th> 
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int k = 1;
                    foreach (var item in Model.OrderByDescending(m => m.ExpenseRequisitionId))
                    {
                        sum += item.TotalAmount;
                                <tr>
                                    <th>@k</th>

                                    <td>
                                        <span class="wrap-table">
                                            @item.Title <br />
                                        </span>
                                    </td>
                                    <td>
                                        <span class="wrap-table">
                                            @item.TimeStampRegistered.Split('-')[0]
                                        </span>
                                    </td>
                                    <td>
                                        @foreach (var dpt in deptList.Where(x => x.DepartmentId == item.DepartmentId))
                                        {
                                            <span class="wrap-table">
                                                @dpt.Name
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        <span class="wrap-table">
                                            @item.TotalAmount
                                        </span>
                                    </td>
                                    <td>
                                        <span class="wrap-table">
                                            @Generate.GetretiredAmountByRequisitionId(item.ExpenseRequisitionId)
                                        </span>
                                    </td>
                                    <td>
                                        <span class="wrap-table">
                                            @Generate.GetretiredAmountByRequisitionId(item.ExpenseRequisitionId)
                                        </span>
                                    </td>
                                    <td>
                                        <span class="wrap-table">
                                            @Generate.GetretiredAmountByRequisitionId(item.ExpenseRequisitionId)
                                        </span>
                                    </td>
                                    <td>
                                        <span class="wrap-table">
                                            @{ var enumName = (RequestStatus)item.Status; }
                                            @enumName
                                        </span>

                                    </td>
                                    <td>
                                        <div class="tabledit-toolbar btn-toolbar">
                                            <span class="p-1"><a href="@Url.Action("_ExpenseRequisitionDetail", "ExpenseRequisitionManager", new {ExpenseRequisitionId = item.ExpenseRequisitionId})" data-toggle="tooltip" title="Detail">   <i class="fas fa-eye"></i></a></span>
                                            <span class="p-1"><a href="@Url.Action("RecommendationList", "WorkflowTaskManager", new {ExpenseRequisitionId = item.ExpenseRequisitionId})" data-modal="" data-toggle="tooltip" title=""><i class="fas fa-chart-bar"></i></a></span>
                                            <span class="p-1"><a href="@Url.Action("_Receipt", "ReportManager", new {ExpenseRequisitionId = item.ExpenseRequisitionId})" data-modal="" data-toggle="tooltip" title=""><i class="fas fa-receipt"></i></a></span>
                                        </div>
                                    </td>
                                </tr>
                        k++;
                    }
                }
               
            </tbody>
        </table>  
    </div>
    </div>
</div>
<iframe id="txtArea1" style="display:none"></iframe>
@section scripts {
    <script>
        $(document).ready(function () {
            loadBeneficiaries(1);
            loadExpenseItems(10101);
        });
          function numberWithCommas(x) {
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
        

        function getAppDateFormat(date)
        {
            if (date !== null) {
                var dateCastedToString = String(date);
                var formattedDate = dateCastedToString.trim().replace(" ", "");
                var year = formattedDate.split(",")[2];
                var month = formattedDate.split(",")[0];
                var day = formattedDate.split(",")[1];

                return year + "/" + month + "/" + day;
            }
            return  "";
        }
        $('#dtBasicExample').DataTable(); 

        $('.dataTables_length').hide();
        $('#dtBasicExample_filter').hide();

        $('#currentTotal').html(numberWithCommas('@sum'));

        $('#grandTotal').val(" Grand Total: " +numberWithCommas('@ViewBag.GrandTotal') );

        $('#TotalAmt').val(' Selected Total: ' + numberWithCommas('@sum'));

        $('#btnLoad').on("click", function () {
            ClearInlineError("dvError");
            var requestType = $("#RequestTypeId > option:selected").attr("value");
            var requestStatus = $("#RequestStatusId > option:selected").attr("value");
            var reportrange = $("#reportrange").text();
            var start = reportrange.trim().split('-')[0];
            var end = reportrange.trim().split('-')[1];
            var formattedStartDate = getAppDateFormat(start);
            var formattedEndDate = getAppDateFormat(end);
            var itemId = $("#ExpenseItemId").val();
            var beneficiaryId = $("#BeneficiaryId").val();
                if (formattedStartDate === null || formattedStartDate=== "NaN/NaN/NaN" || formattedStartDate.length  < 1) {
                    start = "";
            }

                if (formattedEndDate === null || formattedEndDate === "NaN/NaN/NaN" || formattedEndDate.length  < 1) {
                    end = "";
            }
            if (requestType === null || requestType === "" || parseInt(requestType) < 1) {
                    requestType = 0;
            }
             if (requestStatus === null || requestStatus === "") {
                    requestStatus = -1000;
            }
             if (itemId === null || itemId === "" || parseInt(itemId) < 1) {
                    itemId = 0;
            }
             if (beneficiaryId === null || beneficiaryId === "" || parseInt(beneficiaryId) < 1) {
                    beneficiaryId = 0;
            }



               

                var url = '@Url.Action("GetRequisitions", "ReportManager")?clientId=' + parseInt(localStorage["_ClientID_"]) +
                    "&productId=" + parseInt(localStorage["_ProductID_"]) +
                    "&requestType=" + parseInt(requestType) +
                    "&requestStatus=" + parseInt(requestStatus)+
                    "&start=" + formattedStartDate +
                    "&beneficiary=" + beneficiaryId +
                    "&item=" + itemId + 
                    "&end=" + formattedEndDate;
                $("#waitAdd").show();

                window.location.href = url;

                $("#waitAdd").hide(); 
        });
         
    </script> 
     
    <script>
        function deleteItem(id) {
            if (id === "" || parseInt(id) < 1) {
                InlineErrorMessage(data.Error ? data.Error : "Invalid Selection!", "dvError");
                return false;
            }
            if (!confirm("Are you sure you want to delete this item?")) {
                return false;
            } 

            $.ajax({
                type: "POST",
                url: '@Url.Action("", "ExpenseRequisitionManager")',
                data: { ExpenseRequisitionId: parseInt(id) }, //JSON.stringify(),
                success: function (data) {
                    if (!data.IsAuthenticated) {
                        window.location.href = "@Url.Action("Login", "Portal")";
                        return;
                    }
                    if (!data.IsSuccessful) {
                        InlineErrorMessage(data.Error ? data.Error : "Unknown error occured. Please try again later!", "dvError");
                        swal({
                            title: "",
                            text: data.Error ? data.Error : "Unknown error occured. Please try again later!",
                            type: "error",
                            showCancelButton: false,
                            confirmButtonText: "Close",
                            closeOnConfirm: true,
                        }, function (isConfirm) {
                            if (isConfirm) {

                            }
                        });

                    } else {
                        $('#dvModal').modal('hide');
                        swal({
                            title: "",
                            text: "ExpenseRequisition Information was deleted successfully",
                            type: "success",
                            showCancelButton: false,
                            confirmButtonText: "Ok",
                            closeOnConfirm: false,
                        }, function (isConfirm) {
                            if (isConfirm) {
                                window.location.reload();
                            }
                        });
                    }
                },
                complete: function () {
                    // $("#waitAdd").hide();

                }
            });
            return false;
        }
    </script>

    <script type="text/javascript">
        $(function () {
            var start = moment().subtract(29, 'days');
            var end = moment();

            function cb(start, end) {
                $('#reportrange span').html(start.format('MM, D, YYYY') + ' - ' + end.format('MM, D, YYYY'));
            }

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);

            cb(start, end);
        });
    </script>

    <script>
          function loadBeneficiaries(beneficiaryId) {
                $("#BeneficiaryId").html("<option value=''>Beneficiaries...</option>");
                $("#BeneficiaryId").prop("disabled", true);
                $.getJSON("@Url.Action("LoadBeneficiaries", "OBusinessDataProvider")?beneficiaryId=" + parseInt(beneficiaryId),
                    function(data) {
                        var items = "";
                        $.each(data,
                            function (i, item) {
                                if (parseInt('@ViewBag.BeneficiaryId') === item.Id) {
                                    items += "<option value='" +  item.Id + "' selected='selected'>" + item.Name +    "</option>";
                                } else if (item.Id === 0) {
                                    items += "<option value='' > -- Select Beneficiary -- </option>";
                                } else {
                                    items += "<option value='" + item.Id + "'>" + item.Name + "</option>";
                                }

                            });
                        $("#BeneficiaryId").html(items);
                        $("#BeneficiaryId").prop("disabled", false);
                    });

        }

          function loadExpenseItems(reportNo) { 
            $("#ExpenseItemId").html("<option value=''>ExpenseItem...</option>");
              $("#ExpenseItemId").prop("disabled", true);
              $.getJSON("@Url.Action("LoadFilteredExpenseItems", "OBusinessDataProvider")?clientId=" + parseInt(localStorage["_ClientId_"]) + "&productId=" + parseInt(localStorage["_ProductId_"]) + "&report=" + parseInt(reportNo),
                function(data) {
                    var items = "";
                    $.each(data,
                        function (i, item) { 
                            if (parseInt('@ViewBag.ExpenseItemId') === item.Id) {
                                if (item.Id === 0) {
                                    items += "<option value='' > -- Please Select -- </option>";
                                } else {
                                    items += "<option value='" + item.Id + "' selected='selected'>" + item.Name + "</option>";

                                }
                            } else if (item.Id === 0) {
                                items += "<option value='' > --  Select -- </option>";
                            } else {
                                items += "<option value='" + item.Id + "'>" + item.Name + "</option>"; 
                            }
                        });
                    $("#ExpenseItemId").html(items);
                }).done(function() {
                $("#ExpenseItemId").prop("disabled", false);
            });
        }
    </script>
     
    
    <script>
        function fnExcelReport()
        {

         if ('@Model' === null || parseInt(@Model.Count()) < 1) {
                 swal("Alert","Cannot download empty list",  "error");
                 return false;
            }
             
            var tab_text="<table border='1px'><tr bgcolor='#eeeeee'>";
            var textRange; var j=0;
            tab = document.getElementById('dtBasicExample'); 

            for(j = 0 ; j < tab.rows.length ; j++) 
            {     
                tab_text=tab_text+tab.rows[j].innerHTML+"</tr>";
               
            }

            tab_text=tab_text+"</table>";
            tab_text= tab_text.replace(/<A[^>]*>|<\/A>/g, ""); 
            tab_text= tab_text.replace(/<img[^>]*>/gi,""); 
            tab_text = tab_text.replace(/<input[^>]*>|<\/input>/gi, "");  

            var ua = window.navigator.userAgent;
            var msie = ua.indexOf("MSIE "); 

            if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))   
            {
                txtArea1.document.open("txt/html","replace");
                txtArea1.document.write(tab_text);
                txtArea1.document.close();
                txtArea1.focus(); 
                sa=txtArea1.document.execCommand("SaveAs",true,"Say Thanks to Sumit.xlxs");
            }  
            else              
                sa = window.open('data:application/vnd.ms-excel,' + encodeURIComponent(tab_text));  

            return (sa);
        }
    </script>
    <script>
        str = GetTitleLength(lengthOfTitle);

        str = wordWrap(str, 40);

        function wordWrap(str, maxWidth) {
            var newLineStr = "\n"; done = false; res = '';
            while (str.length > maxWidth) {                 
                found = false;
                // Inserts new line at first whitespace of the line
                for (i = maxWidth - 1; i >= 0; i--) {
                    if (testWhite(str.charAt(i))) {
                        res = res + [str.slice(0, i), newLineStr].join('');
                        str = str.slice(i + 1);
                        found = true;
                        break;
                    }
                }
                // Inserts new line at maxWidth position, the word is too long to wrap
                if (!found) {
                    res += [str.slice(0, maxWidth), newLineStr].join('');
                    str = str.slice(maxWidth);
                }

            }

            return res + str;
        }

        function testWhite(x) {
            var white = new RegExp(/^\s$/);
            return white.test(x.charAt(0));
        };

        function GetTitleLength(title) {
            if (title !== "") {
                return title;
            }
        }
    </script>
}