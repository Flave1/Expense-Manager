@model IEnumerable<GlobalLitePortalHelper.APIObjs.DisbursementObj>
@using XPLUG.WEBTOOLKIT
@using PlugLitePortalHelper.APIObjs
@using GlobalLitePortalHelper.APICore
@{
    ViewBag.Title = "Disbursement Management";
    ViewBag.PgTitle = "Disbursement Management";
    var error = ViewBag.Error as string;

    decimal sum = 0;
    var deptList = (List<DepartmentObj>)Session["_DeptList_"];
    if (deptList == null)
    {
        deptList = new List<DepartmentObj>();
    }
}
@Html.Partial("_WaitLoader")

<b><h3> Requisition Reports  </h3></b>
<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-sm-11">
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-md-4">
                            <label>Date </label>
                            <div id="reportrange" class="form-control input-new">
                                <i class="fa fa-calendar"></i>&nbsp;
                                <span></span> <i class="fa fa-caret-down"></i>
                            </div>
                        </div>

                        <div class="col-md-3">
                            <label>Request Status</label>
                            @Html.DropDownList("RequestStatus", EnumHelper.GetSelectList(typeof(RequestStatus)), "Select Request Status", new { @id = "RequestStatusId", @class = "form-control input-new" })
                        </div>

                        <div class="col-md-3">
                            <label>Request Type</label>
                            @Html.DropDownList("RequestType", EnumHelper.GetSelectList(typeof(RequestType)), "Select Request Type", new { @id = "RequestTypeId", @class = "form-control input-new" })
                        </div>


                        <div class="col-md-2" style="padding-top:6px;">
                            <br />
                            <button type="button" class="btn btn-yellow btn-sm waves-effect waves-light d-inline-block md-trigger" id="btnLoad">
                                <i class="icofont icofont-plus m-r-5"></i>LOAD
                            </button>

                        </div>
                        <div class="col-md-4">
                            <input type="text" readonly value="" class="small" id="TotalAmt" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card-block">
        @if (!string.IsNullOrEmpty(error) && error.Length > 0)
        {
            <div class="alert alert-success btn btn-sm" role="alert">
                @Html.Raw(error)
            </div>
        }
        <div class="table-responsive">
            <table id="dtBasicExample" class="table table-striped table-bordered" cellspacing="0" width="100%">

                <thead>
                    <tr>
                        <th>#</th>
                        <th> Title  </th>
                        <th> Department  </th>
                        <th>  Request Number  </th>
                        <th>  T.Amount  </th>
                        <th>  No. of items  </th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int k = 1;
                        foreach (var item in Model.OrderByDescending(m => m.DisbursementId))
                        {
                            sum += item.AmountDisbursed;
                            <tr>
                                <th>@k</th>

                                <td>
                                    <span class="wrap-table">
                                        @item.Title
                                    </span>
                                </td> 

                                <td>
                                    <span class="wrap-table">
                                        @item.AmountApproved
                                    </span>
                                </td>
                                <td>
                                    <span class="wrap-table">
                                        @item.AmountDisbursed
                                    </span>
                                </td> 
                                <td>
                                    <span class="wrap-table">
                                        @{ var enumName = (RequestStatus)item.Status; }
                                        @enumName
                                    </span>
                                </td>
                                <td>
                                    @*<div class="tabledit-toolbar btn-toolbar">
                                        <span class="p-1"><a href="@Url.Action("_DisbursementDetail", "DisbursementManager", new {DisbursementId = item.DisbursementId})" data-toggle="tooltip" title="Detail">   <i class="fas fa-eye"></i></a></span>
                                        <span class="p-1"><a href="@Url.Action("RecommendationList", "WorkflowTaskManager", new {DisbursementId = item.DisbursementId})" data-modal="" data-toggle="tooltip" title=""><i class="fas fa-chart-bar"></i></a></span>

                                    </div>*@
                                </td>
                            </tr>
                            k++;
                        }
                    }
                  
                </tbody>
            </table>
        </div>
    </div>
</div>
@section scripts {
    <script>
          function numberWithCommas(x) {
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        function getAppDateFormat(date)
        {
            if (date !== null) {
                var dateCastedToString = String(date);
                var formattedDate = dateCastedToString.trim().replace(" ", "");
                var year = formattedDate.split(",")[2];
                var month = formattedDate.split(",")[0];
                var day = formattedDate.split(",")[1];

                return year + "/" + month + "/" + day;
            }
            return  "";
        }
        $('#dtBasicExample').DataTable();

        $('.dataTables_length').hide();
        $('#dtBasicExample_filter').hide();

        $('#currentTotal').html(numberWithCommas('@ViewBag.PageSum'));
        $('#grandTotal').html(numberWithCommas('@ViewBag.GrandTotal'));

        $('#TotalAmt').val(numberWithCommas('@sum') + ' total amount of requisitions made');

        $('#btnLoad').on("click", function () {
            ClearInlineError("dvError");
            var requestType = $("#RequestTypeId > option:selected").attr("value");
            var requestStatus = $("#RequestStatusId > option:selected").attr("value");
            var reportrange = $("#reportrange").text();
            var start = reportrange.trim().split('-')[0];
            var end = reportrange.trim().split('-')[1];
            var formattedStartDate = getAppDateFormat(start);
            var formattedEndDate = getAppDateFormat(end);
                if (formattedStartDate === null || formattedStartDate=== "NaN/NaN/NaN" || formattedStartDate.length  < 1) {
                    start = "";
            }
                if (formattedEndDate === null || formattedEndDate === "NaN/NaN/NaN" || formattedEndDate.length  < 1) {
                    end = "";
            }
            if (requestType === null || requestType === "" || parseInt(requestType) < 1) {
                    requestType = 0;
                }

                if (requestStatus === null || requestStatus === "") {
                    requestStatus = -1000;
                }

                var url = '@Url.Action("GetDisbursements", "ReportManager")?clientId=' + parseInt(localStorage["_ClientID_"]) +
                    "&productId=" + parseInt(localStorage["_ProductID_"]) +
                    "&requestType=" + parseInt(requestType) +
                    "&requestStatus=" + parseInt(requestStatus)+
                    "&start=" + formattedStartDate+
                    "&end=" + formattedEndDate;
                $("#waitAdd").show();

                window.location.href = url;

                $("#waitAdd").hide();

        });


    </script>




    <script>
        function deleteItem(id) {
            if (id === "" || parseInt(id) < 1) {
                InlineErrorMessage(data.Error ? data.Error : "Invalid Selection!", "dvError");
                return false;
            }
            if (!confirm("Are you sure you want to delete this item?")) {
                return false;
            }


            $.ajax({
                type: "POST",
                url: '@Url.Action("", "DisbursementManager")',
                data: { DisbursementId: parseInt(id) }, //JSON.stringify(),
                success: function (data) {
                    if (!data.IsAuthenticated) {
                        window.location.href = "@Url.Action("Login", "Portal")";
                        return;
                    }
                    if (!data.IsSuccessful) {
                        InlineErrorMessage(data.Error ? data.Error : "Unknown error occured. Please try again later!", "dvError");
                        swal({
                            title: "",
                            text: data.Error ? data.Error : "Unknown error occured. Please try again later!",
                            type: "error",
                            showCancelButton: false,
                            confirmButtonText: "Close",
                            closeOnConfirm: true,
                        }, function (isConfirm) {
                            if (isConfirm) {

                            }
                        });

                    } else {
                        $('#dvModal').modal('hide');
                        swal({
                            title: "",
                            text: "Disbursement Information was deleted successfully",
                            type: "success",
                            showCancelButton: false,
                            confirmButtonText: "Ok",
                            closeOnConfirm: false,
                        }, function (isConfirm) {
                            if (isConfirm) {
                                window.location.reload();
                            }
                        });
                    }
                },
                complete: function () {
                    // $("#waitAdd").hide();

                }
            });
            return false;
        }
    </script>

    <script type="text/javascript">
        $(function () {

            var start = moment().subtract(29, 'days');
            var end = moment();

            function cb(start, end) {
                $('#reportrange span').html(start.format('MM, D, YYYY') + ' - ' + end.format('MM, D, YYYY'));
            }

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);

            cb(start, end);

        });
    </script>

}